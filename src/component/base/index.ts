import { addFireWork, addStars, addFog, addSkyBox } from "@/utils/three/environment";
import { addText3D } from '@src/utils/three/font'
import {
  addPhysicsForFont,
  addPhysicsForModel,
  createCube,
  createDefaultPhysicsWorld,
  createGround,
  createSphere,
} from "@/utils/three/physics";
import { getRandomColor } from "@/utils/common";
import { loadTexturesFromAtlas, useGltfLoader } from "@/utils/three/loader";
import { setupAutoRotate } from "@/utils/three/animate";
import * as THREE from "three";
import Base from "@/utils/three/init";
import type { Body, Vec3, World } from "cannon-es";
import { addAmbientLightDefault, addDirectionalLightDefault } from '@/utils/three/light'
/**
 * 创建一个简单的物理模拟场景
 * @param {Object} base - 包含场景、相机和渲染器的对象
 */
async function addPhysicsTest(base: Base, world: World) {
  const { scene, camera, renderer } = base;

  //添加地面
  const { groundBody, groundMesh } = createGround();
  world.addBody(groundBody);
  scene.add(groundMesh);

  const fontList: string[] = [
    "Press",
    "the",
    "space",
    "key",
    "to",
    "launch",
    "Spark",
  ];
  for (let i = 0; i < fontList.length; i++) {
    const textMesh = await addText3D(
      base,
      fontList[i],
      new THREE.Vector3(3 - i, 10 + i, i * 3 - 6),
    );
    const { meshBody: textMeshBody } = addPhysicsForFont(textMesh);
    world.addBody(textMeshBody);
  }
  /********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************** */
  //添加立方体
  const { cubeBody, cubeMesh } = createCube();
  world.addBody(cubeBody);
  scene.add(cubeMesh);

  // 添加球体
  const { sphereMesh, sphereBody } = createSphere({
    radius: 0.5,
    // 半径增大
    position: new THREE.Vector3(0, 5, 5),
    // 改变初始位置
    meshMaterialOptions: {
      color: 0x0000ff, // 改变颜色为红色
    }
  });
  world.addBody(sphereBody);
  scene.add(sphereMesh);

  //添加飞机
  const loadGltfModelFunc = useGltfLoader();
  const planeModel = await loadGltfModelFunc(
    "/src/assets/model/gltf/plane.gltf",
    new THREE.Vector3(-5, 10, -5),
    new THREE.Vector3(0.25, 0.25, 0.25),
  );
  const { gltfBody: planeGltfBody } = addPhysicsForModel(planeModel, {}, 1);
  base.scene.add(planeModel);
  world.addBody(planeGltfBody);
  // setupModelFlying(base, planeModel, planeGltfBody)
  //添加房子
  const houseModel = await loadGltfModelFunc(
    "/src/assets/model/gltf/littlest-tokyo.glb",
    new THREE.Vector3(0, 2.2, 0),
    new THREE.Vector3(0.01, 0.01, 0.01),
  );
  const { gltfBody: houseGltfBody } = addPhysicsForModel(houseModel);
  base.scene.add(houseModel);
  world.addBody(houseGltfBody);

  // 渲染一个带多贴图的浮旋立方体
  const { cubeBody: floatCubeBody, cubeMesh: floatCubeMesh } = createCube({
    size: 3,
    position: new THREE.Vector3(0, 8, 0),
    mass: 0,
  });
  const textures = await loadTexturesFromAtlas(
    "/src/assets/images/textures/",
    6,
  );
  // 创建一个材质数组，每个材质对应一个从纹理图集加载的贴图
  floatCubeMesh.material = textures.map(
    (texture) =>
      new THREE.MeshBasicMaterial({
        map: texture,
      }),
  );
  setupAutoRotate(floatCubeMesh);
  base.scene.add(floatCubeMesh);
  world.addBody(floatCubeBody);

  // 鼠标点击事件处理
  let ballBodies: Body[] = [];
  /**
   * 当鼠标在渲染器的dom元素上按下时的事件监听器。
   * 该函数主要负责在地面位置创建一个物理球体，并将其同时渲染为一个视觉球体。
   *
   * @param {MouseEvent} event 鼠标事件对象，包含了鼠标按下的详细信息。
   */
  renderer.domElement.addEventListener("mousedown", (event) => {
    // 当鼠标左键按下时
    if (event.button === 0) {
      const { sphereBody: ballBody, sphereMesh: ballMesh } = createSphere({
        radius: 0.5,
        position: new THREE.Vector3(),
        meshMaterialOptions: {
          color: getRandomColor(),
        }
      });

      // 使用Three的Raycaster来计算鼠标位置和场景中物体的交点
      const raycaster = new THREE.Raycaster();
      raycaster.setFromCamera(
        new THREE.Vector2(
          (event.clientX / window.innerWidth) * 2 - 1,
          -(event.clientY / window.innerHeight) * 2 + 1,
        ),
        camera,
      );
      // 检测鼠标点击是否与地面相交
      const intersections = raycaster.intersectObject(groundMesh);
      if (intersections.length > 0) {
        // 如果相交，将球体位置设置为相交点位置
        ballBody.position.copy(intersections[0].point as unknown as Vec3);
      } else {
        // 如果没有相交，打印错误信息并返回
        return;
      }
      // 将物理球体添加到物理世界
      ballBodies.push(ballBody); // 将球体添加到球体数组
      world.addBody(ballBody);
      scene.add(ballMesh); // 将网格模型添加到场景中
      ballMesh.userData.cannonBody = ballBody; // 将物理球体与网格模型关联
    }
  });
  /**
   * 该函数用于实现动画循环。
   * 它通过调用requestAnimationFrame来递归自身，以在每一帧中更新物理世界的状态，并将物理模拟的结果应用到场景中的图形网格。
   */
  function animate() {
    // 请求下一帧动画
    requestAnimationFrame(animate);
    // 更新物理世界的状态
    world.step(1 / 60); // 步进物理模拟，参数为时间步长
    // 遍历球体集合，更新每个球体网格的位置和旋转，以匹配其对应的物理体状态
    ballBodies.forEach((body) => {
      // 查找场景中与当前物理体对应的网格
      const mesh = scene.children.find(
        (child) => child.userData.cannonBody === body,
      );
      if (mesh) {
        // 如果找到，更新网格的位置和旋转
        mesh.position.copy(body.position);
        mesh.quaternion.copy(body.quaternion);
      }
    });
  }
  animate();
}

// 示例用法
const base = new Base({
  isSetUpGUI: true,
  isSetUpControls: true
  // isAddAxesHelper: true,
  // isAddCameraHelper: true,
  // isAddGridHelper: true,
});

const world = createDefaultPhysicsWorld();
addPhysicsTest(base, world);
addFireWork(base);
// // 添加一定数量的星星
addStars(base, 1000); // 数量根据实际情况调整
addFog(base)
addAmbientLightDefault(base)
addDirectionalLightDefault(base)
addSkyBox(base)
