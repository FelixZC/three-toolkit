
import * as kokomi from "kokomi.js";
import * as THREE from "three";
import { createGround, createSphere, addPhysicsForFont } from '@src/utils/three/physics'
import { RoomEnvironment } from "three-stdlib";
import { getRandomColor } from "@/utils/common";
import type { Body } from "cannon-es";
/**
 * Sketch类继承自kokomi.Base，用于创建和管理一个Three的场景。
 * 该类主要功能是初始化相机、设置几何体和材质，以及管理场景中的物体。
 */
export default class Sketch extends kokomi.Base {
  am: kokomi.AssetManager
  async create() {
    new kokomi.OrbitControls(this);
    this.camera.position.set(3, 3, 3);

    const {
      groundMesh,
      groundBody
    } = createGround();
    this.scene.add(groundMesh);
    this.physics.add({ mesh: groundMesh, body: groundBody, copyPosition: true, copyQuaternion: true });
    this.update(() => {
      this.physics.update(1);
    });
    /************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* */
    const ambiLight = new THREE.AmbientLight(0xffffff, 2);
    this.scene.add(ambiLight);
    const dirLight = new THREE.DirectionalLight(0xffffff, 2);
    dirLight.position.set(1, 2, 3);

    // 使用PMREMGenerator从一个房间环境创建环境贴图
    const pmremGenerator = new THREE.PMREMGenerator(this.renderer);
    this.scene.environment = pmremGenerator.fromScene(
      RoomEnvironment(),
      0.04,
    ).texture;

    const rs = new kokomi.RaycastSelector(this);
    let ballBodies: Body[] = [];
    this.container.addEventListener("mousedown", (e) => {
      const target = rs.onChooseIntersect(groundMesh);
      if (target) {
        const p = target.point;
        const { sphereBody: ballBody, sphereMesh: ballMesh } = createSphere({
          radius: 0.5,
          position: p,
          meshMaterialOptions: {
            color: getRandomColor(),
          }
        });
        ballBodies.push(ballBody); // 将球体添加到球体数组
        this.physics.add({ mesh: ballMesh, body: ballBody })
        this.scene.add(ballMesh); // 将网格模型添加到场景中
        ballMesh.userData.cannonBody = ballBody; // 将物理球体与网格模型关联
      }
    });

    const font = await kokomi.loadFont();
    const t3d = new kokomi.Text3D(
      this,
      "hello world",
      font,
      {
        font,
        size: 0.5,
        height: 0.2,
        curveSegments: 120,
        bevelEnabled: true,
        bevelThickness: 0.03,
        bevelSize: 0.02,
        bevelOffset: 0,
      },
      {
        baseMaterial: new THREE.ShaderMaterial(),
        materialParams: {
          side: THREE.DoubleSide,
        },
      }
    );
    t3d.mesh.geometry.center();
    t3d.mesh.position.copy(new THREE.Vector3(0, 1, 0));
    t3d.addExisting();
    const { meshBody } = addPhysicsForFont(t3d.mesh)
    this.physics.add({ mesh: t3d.mesh, body: meshBody });
    /************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* */
  }
}
// 创建Sketch实例并初始化
const sketch = new Sketch("#sketch");
sketch.create();
